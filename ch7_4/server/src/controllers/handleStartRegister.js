import { generateAttestationOptions } from '@simplewebauthn/server';
import { rpName, rpID, sessions } from '../lib/constants.js';

/**
 * Начинает регистрацию физического ключа
 * @param {*} request
 * @param {*} response
 */
export default function handleStartRegister(request, response) {
  const sessionID = request.cookies['__session'];
  const { user } = sessions[sessionID];

  // https://simplewebauthn.dev/docs/packages/server
  // генерируем набор правил для регистрации нового устройства
  const options = generateAttestationOptions({
    rpName, // произвольная текстовая строка, описывающая приложение
    rpID, // имя текущего домена
    userID: user.id, // id пользователя - произвольно
    userName: user.username, // имя пользователя - произовльно

    // список уже зарегистрированных устройств, чтобы избежать двойной регистрации
    excludeCredentials: user.devices.map((dev) => ({
      id: dev.credentialID,
      type: 'public-key',
    })),

    // список действий при активации устройства
    authenticatorSelection: {
      // двухфакторка только в том случае, если какая-то иная служба просит, самый слабый уровень
      userVerification: 'discouraged',
    },
    extensions: {
      // Расширение credProps запрашивает устройство возвратить дополнительные свойства учетных данных, которые могут быть полезными для сервера
      // Можно использовать только при регистрации
      credProps: true,
    },
  });

  user.currentChallenge = options.challenge;
  response.send(options);
}

// GPT 4o lection:

// Опция userVerification определяет, насколько строго аутентификатор (устройство, используемое для аутентификации) должен проверять личность пользователя при выполнении аутентификации. Эта опция может влиять на процесс аутентификации и на то, какие действия потребуются от пользователя. Давай рассмотрим каждый из вариантов:

// Опции userVerification

// 'discouraged'

// Описание: Не будет выполнять проверку пользователя, если взаимодействие с аутентификатором не требует этого автоматически.
// Примеры: Ключи безопасности (security keys) не будут запрашивать PIN, но, например, Touch ID на macOS всегда будет выполнять проверку.
// Когда использовать: Когда требуется минимальное вмешательство пользователя и высокая скорость аутентификации, даже если это снижает уровень безопасности.
// Преимущества: Быстрая аутентификация, минимальные требования к пользователю.
// Недостатки: Потенциально более низкая безопасность, так как проверка пользователя может не выполняться.

// 'preferred'

// Описание: Будет выполнять проверку пользователя, когда это возможно, но пропустит любые запросы на ввод PIN или пароля, если это возможно.
// Примеры: Устройство выполнит проверку пользователя, если это возможно, но если требуется запрос PIN или пароля, то может пропустить его.
// Когда использовать: Когда баланс между удобством и безопасностью важен. Проверка пользователя выполняется, если это не слишком неудобно.
// Преимущества: Хороший баланс между безопасностью и удобством.
// Недостатки: В некоторых случаях проверка пользователя может не выполняться, что может снизить уровень безопасности.

// 'required'

// Описание: Всегда выполняет многофакторную аутентификацию, требуя от пользователя ввода локального пароля или PIN.
// Примеры: Всегда запрашивает у пользователя ввод пароля или PIN при аутентификации.
// Когда использовать: Когда высокий уровень безопасности является приоритетом, и можно позволить пользователю выполнять дополнительные действия для подтверждения личности.
// Преимущества: Высокий уровень безопасности, так как проверка пользователя всегда выполняется.
// Недостатки: Может быть менее удобно для пользователя, так как всегда требуется ввод дополнительной информации.

// Как это влияет на процесс аутентификации?

// Скорость и удобство: При использовании discouraged процесс аутентификации будет быстрее и удобнее для пользователя, так как проверка личности может не выполняться. В случае preferred аутентификация будет сбалансирована между удобством и безопасностью, а при required всегда будет запрашиваться дополнительная проверка, что замедляет процесс, но повышает безопасность.
// Уровень безопасности: discouraged предлагает наименьший уровень безопасности, так как проверка пользователя может быть пропущена. preferred обеспечивает средний уровень безопасности, проверяя пользователя, когда это возможно без значительного неудобства. required предлагает наивысший уровень безопасности за счет требуемой многофакторной аутентификации.
